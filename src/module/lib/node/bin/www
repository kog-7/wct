#!/usr/bin/env node

/**
* Module dependencies.
*/

var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');
const getPort = require('get-port');
const opn=require("opn");
let args = Array.prototype.slice.call(process.argv, 2);


/**
* Get port from environment and store in Express.
*/
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }

  return false;
}




var port = normalizePort(process.env.PORT || '8890');

getPort({port}).then((port)=>{

  let openBrowser=args[1];

  app.set('port', port);
  var server = http.createServer(app);
  server.listen(port,function(){
    console.log(`${port} is opened and listened for wct lib`);
    if(openBrowser){
      opn(`http://127.0.0.1:${port}`,{app:openBrowser});
    }
    else{
      opn(`http://127.0.0.1:${port}`);
    }

  });
  server.on('error', onError);
  server.on('listening', onListening);






  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
      case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
      default:
      throw error;
    }
  }

  /**
  * Event listener for HTTP server "listening" event.
  */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }



});
